var searchIndex = JSON.parse('{\
"fastx":{"doc":"","t":[0,0,0,0,0,4,13,13,13,13,13,13,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11],"n":["error","reader","record","records","writer","Error","MissingName","MissingPrefix","MissingQuality","MissingSecondDescription","MissingSequence","PartialRecord","borrow","borrow_mut","from","into","into","try_from","try_into","type_id","Reader","borrow","borrow_mut","from","into","new","next_record","records","try_from","try_into","type_id","Record","borrow","borrow_mut","clone","clone_into","default","description","description_mut","eq","fastq2fasta","fmt","from","into","is_fastq","name","name_mut","ne","quality","quality_mut","second_description","second_description_mut","sequence","sequence_mut","to_owned","try_from","try_into","type_id","Records","borrow","borrow_mut","from","into","into_iter","new","next","try_from","try_into","type_id","Writer","borrow","borrow_mut","from","get_ref","into","new","try_from","try_into","type_id","write_record"],"q":["fastx","","","","","fastx::error","","","","","","","","","","","","","","","fastx::reader","","","","","","","","","","","fastx::record","","","","","","","","","","","","","","","","","","","","","","","","","","","fastx::records","","","","","","","","","","","fastx::writer","","","","","","","","","",""],"d":["Define specific io error","The fastx reader","The fastx record","Iterator over record","The fastx writer","Error could be generate by FASTX reading and writing","No id","Not the good sequence prefix","No or empty quality string (fastq only)","No second description (fastq only)","No sequence","Partial Record","","","","","","","","","Struct to perform reade of fasta or fastq file","","","","","Create a new Reader from a std::io::BufRead","Get next record from inner","Generate an iterator of Record","","","","Fastx record struct","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A FASTX writer","","","","Returns a reference to the underlying writer.","","Creates a FASTX writer.","","","","Writes a FASTX record."],"i":[0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,2,2,2,2,2,2,2,2,2,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,4,4,4,4,4,4,4,4,4,4,0,5,5,5,5,5,5,5,5,5,5],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[],["error",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[],["result",6]],[[],["option",4,[["result",6,[["record",3]]]]]],[[],["records",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[],["record",3]],[[]],[[],["record",3]],[[],["option",4]],[[],["option",4]],[[["record",3]],["bool",15]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["bool",15]],[[]],[[],["vec",3]],[[["record",3]],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[],["vec",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[["reader",3]]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["record",3]],["result",6,[["usize",15]]]]],"p":[[4,"Error"],[3,"Reader"],[3,"Record"],[3,"Records"],[3,"Writer"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};